plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'DeepDivers'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
	implementation 'org.mindrot:jbcrypt:0.4'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.0.0'
	implementation 'org.testcontainers:localstack:1.20.1'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'mysql:mysql-connector-java:8.0.33'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.rest-assured:spring-mock-mvc'
	testImplementation 'org.testcontainers:localstack:1.20.1'
	testImplementation 'org.testcontainers:junit-jupiter:1.20.1'


	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
	main.java.srcDirs += [generated]
}

clean {
	delete file(generated)
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport  // 테스트 후 Jacoco 리포트 생성
}

jacoco {
	toolVersion = "0.8.9"  // Jacoco 버전 지정
}

def excludedPatterns = [
		'deepdivers.community.BackendApplication',
		'deepdivers.community.**.config.**',
		'deepdivers.community.**.exception.**',
		'deepdivers.community.**.dto.**',
		'deepdivers.community.infra.aws.s3.properties.**',
		'deepdivers.community.infra.aws.s3.generator.S3RequestGenerator'
]

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.required = true
		html.outputLocation = layout.buildDirectory.dir('reports/jacoco/html')
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, includes: ['**/*.class'], excludes: excludedPatterns)
		}))
	}
}

// 커버리지 체크 규칙
jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			excludes = excludedPatterns
			limit {
				minimum = 0.80  // 최소 80% 커버리지 요구
			}
		}
	}
}
